{
  "paths": {
    "/auth/logout": {
      "post": {
        "responses": {
          "201": {
            "description": "Successfully logged out",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogoutResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "summary": "Logout the user",
        "tags": [
          "auth"
        ],
        "operationId": "Logout"
      }
    },
    "/auth/wallet/challenge": {
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "200": {
            "description": "Challenge message generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChallengeResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChallengeRequest"
              }
            }
          }
        },
        "summary": "Generate a challenge message for Solana wallet signature authentication",
        "tags": [
          "auth"
        ],
        "operationId": "GetWalletChallenge"
      }
    },
    "/auth/wallet/verify": {
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "201": {
            "description": "Successfully authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized or invalid signature",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifySignature"
              }
            }
          }
        },
        "summary": "Verify a Solana wallet signature and authenticate the user",
        "tags": [
          "auth"
        ],
        "operationId": "VerifyWalletSignature"
      }
    },
    "/users/": {
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "201": {
            "description": "User successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputCreateUser"
              }
            }
          }
        },
        "summary": "Create a new user",
        "tags": [
          "users"
        ],
        "operationId": "CreateUser"
      }
    },
    "/users/@me": {
      "get": {
        "responses": {
          "200": {
            "description": "User information retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "summary": "Get authenticated user informations",
        "tags": [
          "users"
        ],
        "operationId": "GetAuthUserInfos"
      }
    },
    "/users/{wallet_address}": {
      "get": {
        "responses": {
          "200": {
            "description": "Check if user exists completed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserExistResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "summary": "Check if user with the wallet address exists",
        "tags": [
          "users"
        ],
        "operationId": "GetUserWithWalletAddress"
      },
      "parameters": [
        {
          "in": "path",
          "name": "wallet_address",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/users/{user_id}": {
      "put": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Error updating user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputUpdateUser"
              }
            }
          }
        },
        "summary": "Update an existing user",
        "tags": [
          "users"
        ],
        "operationId": "UpdateUser"
      },
      "parameters": [
        {
          "in": "path",
          "name": "user_id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/daos/": {
      "get": {
        "responses": {
          "200": {
            "description": "List of all DAOs",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DAO"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "summary": "List all DAOs",
        "tags": [
          "daos"
        ],
        "operationId": "GetAllDAOs"
      },
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "201": {
            "description": "DAO created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DAOSchemaResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputCreateDAO"
              }
            }
          }
        },
        "summary": "Create a new DAO",
        "tags": [
          "daos"
        ],
        "operationId": "CreateDAO"
      }
    },
    "/daos/{dao_id}": {
      "get": {
        "responses": {
          "200": {
            "description": "DAO retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DAO"
                }
              }
            }
          },
          "404": {
            "description": "DAO not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "summary": "Get a DAO by ID",
        "tags": [
          "daos"
        ],
        "operationId": "GetDAOById"
      },
      "put": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "200": {
            "description": "DAO updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DAOSchemaResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "404": {
            "description": "DAO not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DAOUpdate"
              }
            }
          }
        },
        "summary": "Update a DAO",
        "tags": [
          "daos"
        ],
        "operationId": "UpdateDAO"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "DAO deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DAOSchemaResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Error deleting DAO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "404": {
            "description": "DAO not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "summary": "Delete a DAO",
        "tags": [
          "daos"
        ],
        "operationId": "DeleteDAO"
      },
      "parameters": [
        {
          "in": "path",
          "name": "dao_id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/daos/{dao_id}/members": {
      "post": {
        "responses": {
          "200": {
            "description": "User added to DAO successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DAOMembershipResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "404": {
            "description": "User or DAO not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "summary": "Add a member to a DAO",
        "tags": [
          "daos"
        ],
        "operationId": "AddMemberToDAO"
      },
      "delete": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "200": {
            "description": "User removed from DAO successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DAOMembershipResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "404": {
            "description": "User or DAO not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DAOMembership"
              }
            }
          }
        },
        "summary": "Remove a member from a DAO",
        "tags": [
          "daos"
        ],
        "operationId": "RemoveMemberFromDAO"
      },
      "parameters": [
        {
          "in": "path",
          "name": "dao_id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/daos/{dao_id}/admins": {
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "200": {
            "description": "User added to DAO successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DAOMembershipResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "404": {
            "description": "User or DAO not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DAOMembership"
              }
            }
          }
        },
        "summary": "Add an admin to a DAO",
        "tags": [
          "daos"
        ],
        "operationId": "AddAdminToDAO"
      },
      "delete": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "200": {
            "description": "User removed from DAO successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DAOMembershipResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "404": {
            "description": "User or DAO not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DAOMembership"
              }
            }
          }
        },
        "summary": "Remove an admin from a DAO",
        "tags": [
          "daos"
        ],
        "operationId": "RemoveAdminFromDAO"
      },
      "parameters": [
        {
          "in": "path",
          "name": "dao_id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/daos/{dao_id}/pods": {
      "get": {
        "responses": {
          "200": {
            "description": "List of all PODs for the DAO",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/POD"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "404": {
            "description": "User or DAO not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "summary": "Get all PODs for a DAO",
        "tags": [
          "daos"
        ],
        "operationId": "GetAllPODsForDAO"
      },
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "201": {
            "description": "POD created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PODSchemaResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "404": {
            "description": "User or DAO not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputCreatePOD"
              }
            }
          }
        },
        "summary": "Create a new POD",
        "tags": [
          "daos"
        ],
        "operationId": "CreatePOD"
      },
      "parameters": [
        {
          "in": "path",
          "name": "dao_id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/daos/{dao_id}/pods/{pod_id}": {
      "get": {
        "responses": {
          "200": {
            "description": "POD retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/POD"
                }
              }
            }
          },
          "404": {
            "description": "DAO or POD not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "summary": "Get a POD by ID",
        "tags": [
          "daos"
        ],
        "operationId": "GetPODById"
      },
      "put": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "200": {
            "description": "POD updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PODSchemaResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "404": {
            "description": "User, DAO or POD not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PODUpdate"
              }
            }
          }
        },
        "summary": "Update a POD",
        "tags": [
          "daos"
        ],
        "operationId": "UpdatePOD"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "POD deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PODSchemaResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Error deleting POD",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "404": {
            "description": "User, DAO or POD not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "summary": "Delete a POD",
        "tags": [
          "daos"
        ],
        "operationId": "DeletePOD"
      },
      "parameters": [
        {
          "in": "path",
          "name": "dao_id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        },
        {
          "in": "path",
          "name": "pod_id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/daos/{dao_id}/pods/{pod_id}/members": {
      "get": {
        "responses": {
          "200": {
            "description": "List of all members in the POD",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "404": {
            "description": "DAO or POD not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "summary": "Get all members of a POD",
        "tags": [
          "daos"
        ],
        "operationId": "GetAllMembersOfPOD"
      },
      "post": {
        "responses": {
          "200": {
            "description": "User added to POD successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PODMembershipResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - User already in POD",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "404": {
            "description": "User, DAO or POD not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "summary": "Add a member to a POD",
        "tags": [
          "daos"
        ],
        "operationId": "AddMemberToPOD"
      },
      "delete": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "200": {
            "description": "User removed from POD successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PODMembershipResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - User not in POD",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "404": {
            "description": "User, DAO or POD not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PODMembership"
              }
            }
          }
        },
        "summary": "Remove a member from a POD",
        "tags": [
          "daos"
        ],
        "operationId": "RemoveMemberFromPOD"
      },
      "parameters": [
        {
          "in": "path",
          "name": "dao_id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        },
        {
          "in": "path",
          "name": "pod_id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/daos/{dao_id}/pods/{pod_id}/feed": {
      "get": {
        "responses": {
          "200": {
            "description": "Discord feed retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscordMessagesResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "404": {
            "description": "DAO or POD not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "summary": "Get Discord feed for a POD",
        "tags": [
          "daos"
        ],
        "operationId": "GetPODFeed"
      },
      "parameters": [
        {
          "in": "path",
          "name": "dao_id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        },
        {
          "in": "path",
          "name": "pod_id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/daos/{dao_id}/pods/{pod_id}/discord-channels": {
      "get": {
        "responses": {
          "200": {
            "description": "Discord channels retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscordChannelsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "404": {
            "description": "DAO or POD not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "summary": "Get all Discord channels for a POD",
        "tags": [
          "daos"
        ],
        "operationId": "GetPODDiscordChannels"
      },
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "201": {
            "description": "Discord channel linked successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscordChannelResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "404": {
            "description": "DAO, POD or Discord channel not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LinkDiscordChannel"
              }
            }
          }
        },
        "summary": "Link a Discord channel to a POD",
        "tags": [
          "daos"
        ],
        "operationId": "LinkDiscordChannelToPOD"
      },
      "parameters": [
        {
          "in": "path",
          "name": "dao_id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        },
        {
          "in": "path",
          "name": "pod_id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/daos/{dao_id}/pods/{pod_id}/discord-channels/{channel_id}": {
      "delete": {
        "responses": {
          "200": {
            "description": "Discord channel unlinked successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscordChannelResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Channel not linked to this POD",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "404": {
            "description": "DAO, POD or Discord channel not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "summary": "Unlink a Discord channel from a POD",
        "tags": [
          "daos"
        ],
        "operationId": "UnlinkDiscordChannelFromPOD"
      },
      "parameters": [
        {
          "in": "path",
          "name": "dao_id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        },
        {
          "in": "path",
          "name": "pod_id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        },
        {
          "in": "path",
          "name": "channel_id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/daos/{dao_id}/pods/{pod_id}/discord-channels/{channel_id}/messages": {
      "get": {
        "responses": {
          "200": {
            "description": "Discord messages retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscordMessagesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Channel not linked to this POD",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "404": {
            "description": "DAO, POD or Discord channel not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "summary": "Get messages from a specific Discord channel",
        "tags": [
          "daos"
        ],
        "operationId": "GetChannelMessages"
      },
      "parameters": [
        {
          "in": "path",
          "name": "dao_id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        },
        {
          "in": "path",
          "name": "pod_id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        },
        {
          "in": "path",
          "name": "channel_id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/treasury/daos/{dao_id}": {
      "get": {
        "responses": {
          "200": {
            "description": "Treasury information for a specific DAO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Treasury"
                }
              }
            }
          },
          "404": {
            "description": "DAO not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "summary": "Get Treasury information for a specific DAO",
        "tags": [
          "treasury"
        ],
        "operationId": "GetDAOTreasury"
      },
      "parameters": [
        {
          "in": "path",
          "name": "dao_id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/treasury/daos/{dao_id}/update-percentages": {
      "put": {
        "responses": {
          "200": {
            "description": "Token percentages updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TreasuryUpdatePercentages"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Error updating token percentages",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "404": {
            "description": "DAO not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "summary": "Update the percentages of tokens in the DAO's treasury without changing prices",
        "tags": [
          "treasury"
        ],
        "operationId": "UpdateDAOTokenPercentages"
      },
      "parameters": [
        {
          "in": "path",
          "name": "dao_id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/treasury/daos/{dao_id}/tokens": {
      "get": {
        "responses": {
          "200": {
            "description": "List of all tokens for the DAO",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Token"
                  }
                }
              }
            }
          },
          "404": {
            "description": "DAO not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "summary": "Get all tokens for a specific DAO",
        "tags": [
          "treasury"
        ],
        "operationId": "GetDAOTokens"
      },
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "201": {
            "description": "Token created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenSchemaResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "404": {
            "description": "DAO not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenCreate"
              }
            }
          }
        },
        "summary": "Create a new token for a specific DAO",
        "tags": [
          "treasury"
        ],
        "operationId": "CreateToken"
      },
      "parameters": [
        {
          "in": "path",
          "name": "dao_id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/treasury/daos/{dao_id}/transfers": {
      "get": {
        "responses": {
          "200": {
            "description": "List of all transfers for the DAO",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Transfer"
                  }
                }
              }
            }
          },
          "404": {
            "description": "DAO not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "summary": "Get all transfers for a specific DAO",
        "tags": [
          "treasury"
        ],
        "operationId": "GetDAOTransfers"
      },
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "201": {
            "description": "Transfer created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransferSchemaResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "404": {
            "description": "DAO not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransferCreate"
              }
            }
          }
        },
        "summary": "Create a new transfer for a specific DAO",
        "tags": [
          "treasury"
        ],
        "operationId": "CreateDAOTransfer"
      },
      "parameters": [
        {
          "in": "path",
          "name": "dao_id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/auth/discord/connect": {
      "get": {
        "responses": {
          "200": {
            "description": "Return Discord authorization URL",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthError"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "summary": "Initiate Discord OAuth flow",
        "tags": [
          "discord_oauth"
        ],
        "operationId": "ConnectDiscord",
        "description": "Redirects the user to Discord's authorization page to begin the OAuth flow."
      }
    },
    "/auth/discord/callback": {
      "get": {
        "responses": {
          "302": {
            "description": "Redirect to frontend with success or error status"
          },
          "500": {
            "description": "Database error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthError"
                }
              }
            }
          },
          "400": {
            "description": "User info retrieval failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoError"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "summary": "Handle Discord OAuth callback",
        "tags": [
          "discord_oauth"
        ],
        "operationId": "DiscordCallback",
        "description": "Processes the callback from Discord after user authorization."
      }
    },
    "/auth/discord/disconnect": {
      "delete": {
        "responses": {
          "200": {
            "description": "Connection successfully removed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DisconnectResponse"
                }
              }
            }
          },
          "404": {
            "description": "No connection found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthError"
                }
              }
            }
          },
          "500": {
            "description": "Error disconnecting account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthError"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "summary": "Disconnect Discord account",
        "tags": [
          "discord_oauth"
        ],
        "operationId": "DisconnectDiscord",
        "description": "Removes the connection between the user's account and their Discord account."
      }
    },
    "/auth/twitter/connect": {
      "get": {
        "responses": {
          "200": {
            "description": "Return Twitter authorization URL",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthError"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "summary": "Initiate Twitter OAuth flow",
        "tags": [
          "twitter_oauth"
        ],
        "operationId": "ConnectTwitter",
        "description": "Redirects the user to Twitter's authorization page to begin the OAuth 2.0 PKCE flow."
      }
    },
    "/auth/twitter/callback": {
      "get": {
        "responses": {
          "302": {
            "description": "Redirect to frontend with success or error status"
          },
          "500": {
            "description": "Database error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthError"
                }
              }
            }
          },
          "400": {
            "description": "User info retrieval failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoError"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "summary": "Handle Twitter OAuth callback",
        "tags": [
          "twitter_oauth"
        ],
        "operationId": "TwitterCallback",
        "description": "Processes the callback from Twitter after user authorization."
      }
    },
    "/auth/twitter/disconnect": {
      "delete": {
        "responses": {
          "200": {
            "description": "Connection successfully removed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DisconnectResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error disconnecting account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthError"
                }
              }
            }
          },
          "404": {
            "description": "No connection found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthError"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "summary": "Disconnect Twitter account",
        "tags": [
          "twitter_oauth"
        ],
        "operationId": "DisconnectTwitter",
        "description": "Removes the connection between the user's account and their Twitter account."
      }
    },
    "/auth/telegram/callback": {
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "200": {
            "description": "Account successfully linked",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectionResponse"
                }
              }
            }
          },
          "500": {
            "description": "Error saving connection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthError"
                }
              }
            }
          },
          "400": {
            "description": "Invalid or missing data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthError"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TelegramAuth"
              }
            }
          }
        },
        "summary": "Process Telegram authentication data",
        "tags": [
          "telegram_auth"
        ],
        "operationId": "TelegramCallback",
        "description": "Handles the authentication data from the Telegram Login Widget."
      }
    },
    "/auth/telegram/disconnect": {
      "delete": {
        "responses": {
          "500": {
            "description": "Error disconnecting account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthError"
                }
              }
            }
          },
          "404": {
            "description": "No connection found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthError"
                }
              }
            }
          },
          "200": {
            "description": "Connection successfully removed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DisconnectResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "summary": "Disconnect Telegram account",
        "tags": [
          "telegram_auth"
        ],
        "operationId": "DisconnectTelegram",
        "description": "Removes the connection between the user's account and their Telegram account."
      }
    },
    "/auth/connections": {
      "get": {
        "responses": {
          "200": {
            "description": "List of social connections",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectionsList"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthError"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthError"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "summary": "Get user's social connections",
        "tags": [
          "social_connections"
        ],
        "operationId": "GetSocialConnections",
        "description": "Returns all social connections for the authenticated user."
      }
    },
    "/proposals/dao/{dao_id}/proposals": {
      "get": {
        "responses": {
          "200": {
            "description": "List of proposals for the DAO",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Proposal"
                  }
                }
              }
            }
          },
          "404": {
            "description": "DAO not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "summary": "Get all proposals for a specific DAO",
        "tags": [
          "proposals"
        ],
        "operationId": "GetProposalsByDAO"
      },
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "201": {
            "description": "Proposal created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProposalSchemaResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User is not a member of this DAO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "404": {
            "description": "DAO not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputCreateProposal"
              }
            }
          }
        },
        "summary": "Create a new proposal for this specific DAO",
        "tags": [
          "proposals"
        ],
        "operationId": "CreateProposalForDAO"
      },
      "parameters": [
        {
          "in": "path",
          "name": "dao_id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/proposals/dao/{dao_id}/proposals/active": {
      "get": {
        "responses": {
          "200": {
            "description": "List of active proposals for the DAO",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Proposal"
                  }
                }
              }
            }
          },
          "404": {
            "description": "DAO not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "summary": "Get all active proposals for a specific DAO",
        "tags": [
          "proposals"
        ],
        "operationId": "GetActiveProposalsByDAO"
      },
      "parameters": [
        {
          "in": "path",
          "name": "dao_id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/proposals/dao/{dao_id}/proposals/{proposal_id}": {
      "get": {
        "responses": {
          "200": {
            "description": "Proposal retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Proposal"
                }
              }
            }
          },
          "400": {
            "description": "Proposal does not belong to this DAO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "404": {
            "description": "DAO or Proposal not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "summary": "Get a specific proposal for a DAO",
        "tags": [
          "proposals"
        ],
        "operationId": "GetDAOProposalById"
      },
      "put": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "200": {
            "description": "Proposal updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProposalSchemaResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid data or Proposal does not belong to this DAO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User is not the creator or an admin",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "404": {
            "description": "DAO or Proposal not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProposalUpdate"
              }
            }
          }
        },
        "summary": "Update a proposal for a DAO",
        "tags": [
          "proposals"
        ],
        "operationId": "UpdateDAOProposal"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "Proposal deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProposalSchemaResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Error deleting proposal or Proposal does not belong to this DAO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User is not the creator or an admin",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "404": {
            "description": "DAO or Proposal not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "summary": "Delete a proposal for a DAO",
        "tags": [
          "proposals"
        ],
        "operationId": "DeleteDAOProposal"
      },
      "parameters": [
        {
          "in": "path",
          "name": "dao_id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        },
        {
          "in": "path",
          "name": "proposal_id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/proposals/dao/{dao_id}/proposals/{proposal_id}/vote": {
      "get": {
        "responses": {
          "200": {
            "description": "Vote counts retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProposalVoteResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Proposal does not belong to this DAO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "404": {
            "description": "DAO or Proposal not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "summary": "Get vote counts for a proposal",
        "tags": [
          "proposals"
        ],
        "operationId": "GetProposalVotes"
      },
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "200": {
            "description": "Vote recorded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProposalVoteResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Proposal is not active, user has already voted, or proposal does not belong to this DAO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User is not a member of this DAO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "404": {
            "description": "DAO or Proposal not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProposalVote"
              }
            }
          }
        },
        "summary": "Vote on a proposal for a DAO",
        "tags": [
          "proposals"
        ],
        "operationId": "VoteOnDAOProposal"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "Vote removed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProposalVoteResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Proposal is not active, user has not voted, or proposal does not belong to this DAO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "404": {
            "description": "DAO or Proposal not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "summary": "Remove vote from a proposal for a DAO",
        "tags": [
          "proposals"
        ],
        "operationId": "RemoveVoteFromDAOProposal"
      },
      "parameters": [
        {
          "in": "path",
          "name": "dao_id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        },
        {
          "in": "path",
          "name": "proposal_id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/proposals/dao/{dao_id}/pod/{pod_id}/proposals": {
      "get": {
        "responses": {
          "200": {
            "description": "List of proposals for the POD",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PodProposalListResponse"
                }
              }
            }
          },
          "404": {
            "description": "POD not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "summary": "Get all proposals for a specific POD",
        "tags": [
          "proposals"
        ],
        "operationId": "GetProposalsByPOD"
      },
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "201": {
            "description": "Proposal created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProposalSchemaResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User is not a member of this POD",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "404": {
            "description": "POD not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputCreateProposal"
              }
            }
          }
        },
        "summary": "Create a new proposal for this specific POD",
        "tags": [
          "proposals"
        ],
        "operationId": "CreateProposalForPOD"
      },
      "parameters": [
        {
          "in": "path",
          "name": "dao_id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        },
        {
          "in": "path",
          "name": "pod_id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/proposals/dao/{dao_id}/pod/{pod_id}/proposals/active": {
      "get": {
        "responses": {
          "200": {
            "description": "List of active proposals for the POD",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PodProposalListResponse"
                }
              }
            }
          },
          "404": {
            "description": "POD not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "summary": "Get all active proposals for a specific POD",
        "tags": [
          "proposals"
        ],
        "operationId": "GetActiveProposalsByPOD"
      },
      "parameters": [
        {
          "in": "path",
          "name": "dao_id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        },
        {
          "in": "path",
          "name": "pod_id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/proposals/dao/{dao_id}/pod/{pod_id}/proposals/{proposal_id}": {
      "get": {
        "responses": {
          "200": {
            "description": "Proposal retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Proposal"
                }
              }
            }
          },
          "400": {
            "description": "Proposal does not belong to this POD",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "404": {
            "description": "POD or Proposal not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "summary": "Get a specific proposal for a POD",
        "tags": [
          "proposals"
        ],
        "operationId": "GetPODProposalById"
      },
      "put": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "200": {
            "description": "Proposal updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProposalSchemaResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid data or Proposal does not belong to this POD",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User is not the creator or a POD member",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "404": {
            "description": "POD or Proposal not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProposalUpdate"
              }
            }
          }
        },
        "summary": "Update a proposal for a POD",
        "tags": [
          "proposals"
        ],
        "operationId": "UpdatePODProposal"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "Proposal deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProposalSchemaResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Error deleting proposal or Proposal does not belong to this POD",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User is not the creator of the proposal",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "404": {
            "description": "POD or Proposal not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "summary": "Delete a proposal for a POD",
        "tags": [
          "proposals"
        ],
        "operationId": "DeletePODProposal"
      },
      "parameters": [
        {
          "in": "path",
          "name": "dao_id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        },
        {
          "in": "path",
          "name": "pod_id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        },
        {
          "in": "path",
          "name": "proposal_id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/proposals/dao/{dao_id}/pod/{pod_id}/proposals/{proposal_id}/vote": {
      "get": {
        "responses": {
          "200": {
            "description": "Vote counts retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProposalVoteResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Proposal does not belong to this POD",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "404": {
            "description": "POD or Proposal not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "summary": "Get vote counts for a POD proposal",
        "tags": [
          "proposals"
        ],
        "operationId": "GetPODProposalVotes"
      },
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "200": {
            "description": "Vote recorded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProposalVoteResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Proposal is not active, user has already voted, or proposal does not belong to this POD",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User is not a member of this POD",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "404": {
            "description": "POD or Proposal not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProposalVote"
              }
            }
          }
        },
        "summary": "Vote on a POD proposal",
        "tags": [
          "proposals"
        ],
        "operationId": "VoteOnPODProposal"
      },
      "delete": {
        "responses": {
          "200": {
            "description": "Vote removed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProposalVoteResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Proposal is not active, user has not voted, or proposal does not belong to this POD",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "404": {
            "description": "POD or Proposal not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingError"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "summary": "Remove a vote from a POD proposal",
        "tags": [
          "proposals"
        ],
        "operationId": "RemoveVoteFromPODProposal"
      },
      "parameters": [
        {
          "in": "path",
          "name": "dao_id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        },
        {
          "in": "path",
          "name": "pod_id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        },
        {
          "in": "path",
          "name": "proposal_id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    }
  },
  "info": {
    "title": "DAO-API",
    "version": "dev"
  },
  "tags": [
    {
      "name": "auth",
      "description": "Auth handler"
    },
    {
      "name": "users",
      "description": "Manage Users"
    },
    {
      "name": "daos",
      "description": "Operations on DAOs"
    },
    {
      "name": "treasury",
      "description": "Operations on Treasury"
    },
    {
      "name": "discord_oauth",
      "description": "Discord OAuth integration"
    },
    {
      "name": "twitter_oauth",
      "description": "Twitter OAuth integration"
    },
    {
      "name": "telegram_auth",
      "description": "Telegram authentication integration"
    },
    {
      "name": "social_connections",
      "description": "Social Connections Management"
    },
    {
      "name": "proposals",
      "description": "Operations on DAO proposals"
    }
  ],
  "openapi": "3.0.2",
  "components": {
    "schemas": {
      "Error": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "Error code"
          },
          "status": {
            "type": "string",
            "description": "Error name"
          },
          "message": {
            "type": "string",
            "description": "Error message"
          },
          "errors": {
            "type": "object",
            "description": "Errors",
            "additionalProperties": {}
          }
        }
      },
      "PaginationMetadata": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer"
          },
          "total_pages": {
            "type": "integer"
          },
          "first_page": {
            "type": "integer"
          },
          "last_page": {
            "type": "integer"
          },
          "page": {
            "type": "integer"
          },
          "previous_page": {
            "type": "integer"
          },
          "next_page": {
            "type": "integer"
          }
        }
      },
      "LogoutResponse": {
        "type": "object",
        "properties": {
          "msg": {
            "type": "string",
            "description": "Message of logout"
          }
        },
        "description": "Logout details"
      },
      "PagingError": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "Error status code"
          },
          "message": {
            "type": "string",
            "description": "Error message"
          },
          "status": {
            "type": "string",
            "description": "Error status"
          }
        },
        "description": "Informations about the error"
      },
      "ChallengeRequest": {
        "type": "object",
        "properties": {
          "wallet_address": {
            "type": "string",
            "description": "Wallet address of the user"
          }
        },
        "required": [
          "wallet_address"
        ],
        "description": "Request to generate authentication challenge"
      },
      "ChallengeResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Challenge message to sign"
          },
          "wallet_address": {
            "type": "string",
            "description": "Wallet address of the user"
          }
        },
        "description": "Challenge message for wallet authentication"
      },
      "VerifySignature": {
        "type": "object",
        "properties": {
          "wallet_address": {
            "type": "string",
            "description": "Wallet address of the user"
          },
          "signature": {
            "type": "string",
            "description": "Signed message from wallet"
          }
        },
        "required": [
          "signature",
          "wallet_address"
        ],
        "description": "Verification of wallet signature"
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "msg": {
            "type": "string",
            "description": "Message of login"
          },
          "token": {
            "type": "string",
            "description": "Token of the user"
          }
        },
        "description": "Token of the user"
      },
      "InputCreateUser": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "Username of the user"
          },
          "wallet_address": {
            "type": "string",
            "description": "Wallet address of the user"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email of the user"
          },
          "member_name": {
            "type": "string",
            "description": "Display name of the user"
          },
          "discord_username": {
            "type": "string",
            "description": "Discord username of the user"
          },
          "twitter_username": {
            "type": "string",
            "description": "Twitter username of the user"
          },
          "telegram_username": {
            "type": "string",
            "description": "Telegram username of the user"
          }
        },
        "required": [
          "username",
          "wallet_address"
        ],
        "description": "Input information needed to create user."
      },
      "User": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "string",
            "description": "Unique user identifier"
          },
          "username": {
            "type": "string",
            "description": "Username of the user"
          },
          "wallet_address": {
            "type": "string",
            "description": "Wallet address of the user"
          },
          "email": {
            "type": "string",
            "description": "Email of the user"
          },
          "member_name": {
            "type": "string",
            "description": "Display name of the user"
          },
          "discord_username": {
            "type": "string",
            "description": "Discord username of the user"
          },
          "twitter_username": {
            "type": "string",
            "description": "Twitter username of the user"
          },
          "telegram_username": {
            "type": "string",
            "description": "Telegram username of the user"
          },
          "last_login": {
            "type": "string",
            "format": "date-time",
            "description": "Last login timestamp"
          },
          "last_interaction": {
            "type": "string",
            "format": "date-time",
            "description": "Last interaction timestamp"
          },
          "email_verified": {
            "type": "boolean",
            "description": "Whether the email is verified"
          },
          "is_active": {
            "type": "boolean",
            "description": "Whether the user is active"
          }
        },
        "description": "User informations."
      },
      "UserResponse": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        },
        "description": "Create/Update a user."
      },
      "UserExistResponse": {
        "type": "object",
        "properties": {
          "exists": {
            "type": "boolean"
          }
        },
        "description": "Check if user with the wallet address exists."
      },
      "InputUpdateUser": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "New username of the user"
          },
          "email": {
            "type": "string",
            "description": "New email of the user"
          },
          "member_name": {
            "type": "string",
            "description": "New display name of the user"
          },
          "discord_username": {
            "type": "string",
            "description": "New Discord username of the user"
          },
          "twitter_username": {
            "type": "string",
            "description": "New Twitter username of the user"
          },
          "telegram_username": {
            "type": "string",
            "description": "New Telegram username of the user"
          }
        },
        "description": "New user information"
      },
      "UserBasic": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "DAO": {
        "type": "object",
        "properties": {
          "dao_id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "owner_id": {
            "type": "string"
          },
          "is_active": {
            "type": "boolean"
          },
          "admins": {
            "readOnly": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserBasic"
            }
          },
          "members": {
            "readOnly": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserBasic"
            }
          }
        },
        "required": [
          "description",
          "name",
          "owner_id"
        ]
      },
      "InputCreateDAO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "owner_id": {
            "type": "string"
          }
        },
        "required": [
          "description",
          "name",
          "owner_id"
        ]
      },
      "DAOSchemaResponse": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string"
          },
          "dao": {
            "$ref": "#/components/schemas/DAO"
          }
        },
        "required": [
          "action",
          "dao"
        ]
      },
      "DAOUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1
          },
          "description": {
            "type": "string",
            "minLength": 1
          },
          "is_active": {
            "type": "boolean"
          }
        }
      },
      "DAOMembershipResponse": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string"
          },
          "dao": {
            "$ref": "#/components/schemas/DAO"
          }
        },
        "required": [
          "action",
          "dao"
        ]
      },
      "DAOMembership": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "string"
          }
        },
        "required": [
          "user_id"
        ]
      },
      "DiscordChannel": {
        "type": "object",
        "properties": {
          "channel_id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "pod_id": {
            "type": "string",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "last_synced_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "message_count": {
            "type": "integer",
            "readOnly": true
          }
        },
        "required": [
          "name"
        ]
      },
      "POD": {
        "type": "object",
        "properties": {
          "pod_id": {
            "type": "string",
            "readOnly": true
          },
          "dao_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "is_active": {
            "type": "boolean",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "discord_channels": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/DiscordChannel"
            }
          }
        },
        "required": [
          "dao_id",
          "description",
          "name"
        ]
      },
      "InputCreatePOD": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "dao_id": {
            "type": "string"
          },
          "discord_channel_id": {
            "type": "string"
          }
        },
        "required": [
          "dao_id",
          "description",
          "name"
        ]
      },
      "PODSchemaResponse": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string"
          },
          "pod": {
            "$ref": "#/components/schemas/POD"
          }
        },
        "required": [
          "action",
          "pod"
        ]
      },
      "PODUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1
          },
          "description": {
            "type": "string",
            "minLength": 1
          },
          "is_active": {
            "type": "boolean"
          },
          "discord_channel_id": {
            "type": "string"
          }
        }
      },
      "PODMembershipResponse": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string"
          },
          "pod": {
            "$ref": "#/components/schemas/POD"
          }
        },
        "required": [
          "action",
          "pod"
        ]
      },
      "PODMembership": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "string"
          }
        },
        "required": [
          "user_id"
        ]
      },
      "DiscordMessage": {
        "type": "object",
        "properties": {
          "message_id": {
            "type": "string",
            "readOnly": true
          },
          "channel_id": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "has_media": {
            "type": "boolean",
            "readOnly": true
          },
          "media_urls": {},
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "indexed_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "required": [
          "channel_id",
          "created_at",
          "user_id",
          "username"
        ]
      },
      "DiscordMessagesResponse": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string"
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiscordMessage"
            }
          }
        },
        "required": [
          "action",
          "messages"
        ]
      },
      "DiscordChannelsResponse": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string"
          },
          "channels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiscordChannel"
            }
          }
        },
        "required": [
          "action",
          "channels"
        ]
      },
      "LinkDiscordChannel": {
        "type": "object",
        "properties": {
          "channel_id": {
            "type": "string"
          },
          "pod_id": {
            "type": "string"
          }
        },
        "required": [
          "channel_id",
          "pod_id"
        ]
      },
      "DiscordChannelResponse": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string"
          },
          "channel": {
            "$ref": "#/components/schemas/DiscordChannel"
          }
        },
        "required": [
          "action",
          "channel"
        ]
      },
      "Token": {
        "type": "object",
        "properties": {
          "token_id": {
            "type": "string",
            "readOnly": true
          },
          "dao_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "symbol": {
            "type": "string"
          },
          "contract": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          },
          "price": {
            "type": "number"
          },
          "percentage": {
            "type": "integer",
            "minimum": 0,
            "maximum": 100
          },
          "value": {
            "readOnly": true
          }
        },
        "required": [
          "contract",
          "dao_id",
          "name",
          "symbol"
        ]
      },
      "Transfer": {
        "type": "object",
        "properties": {
          "transfer_id": {
            "type": "string",
            "readOnly": true
          },
          "dao_id": {
            "type": "string"
          },
          "token_id": {
            "type": "string"
          },
          "from_address": {
            "type": "string"
          },
          "to_address": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "token": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Token"
              }
            ]
          }
        },
        "required": [
          "amount",
          "dao_id",
          "from_address",
          "to_address",
          "token_id"
        ]
      },
      "Treasury": {
        "type": "object",
        "properties": {
          "total_value": {
            "readOnly": true
          },
          "daily_change": {
            "readOnly": true
          },
          "daily_change_percentage": {
            "readOnly": true
          },
          "tokens": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Token"
            }
          },
          "recent_transfers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Transfer"
            }
          }
        }
      },
      "TreasuryUpdatePercentages": {
        "type": "object",
        "properties": {
          "total_value": {
            "readOnly": true
          },
          "daily_change": {
            "readOnly": true
          },
          "daily_change_percentage": {
            "readOnly": true
          },
          "tokens": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Token"
            }
          },
          "recent_transfers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Transfer"
            }
          },
          "action": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "action",
          "message"
        ]
      },
      "TokenCreate": {
        "type": "object",
        "properties": {
          "dao_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "symbol": {
            "type": "string"
          },
          "contract": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          }
        },
        "required": [
          "amount",
          "contract",
          "dao_id",
          "name",
          "symbol"
        ]
      },
      "TokenSchemaResponse": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string"
          },
          "token": {
            "$ref": "#/components/schemas/Token"
          }
        },
        "required": [
          "action",
          "token"
        ]
      },
      "TransferCreate": {
        "type": "object",
        "properties": {
          "dao_id": {
            "type": "string"
          },
          "token_id": {
            "type": "string"
          },
          "from_address": {
            "type": "string"
          },
          "to_address": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "amount",
          "dao_id",
          "from_address",
          "to_address",
          "token_id"
        ]
      },
      "TransferSchemaResponse": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string"
          },
          "transfer": {
            "$ref": "#/components/schemas/Transfer"
          }
        },
        "required": [
          "action",
          "transfer"
        ]
      },
      "OAuthResponse": {
        "type": "object",
        "properties": {
          "auth_url": {
            "type": "string",
            "description": "Authorization URL"
          },
          "message": {
            "type": "string",
            "description": "Success message"
          }
        },
        "required": [
          "auth_url",
          "message"
        ]
      },
      "OAuthError": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error message"
          },
          "code": {
            "type": "integer",
            "description": "Error code"
          }
        },
        "required": [
          "error"
        ]
      },
      "UserInfoError": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "User info retrieval error"
          }
        },
        "required": [
          "error"
        ]
      },
      "DisconnectResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Success message"
          }
        },
        "required": [
          "message"
        ]
      },
      "TelegramAuth": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Telegram user ID"
          },
          "first_name": {
            "type": "string",
            "description": "User's first name"
          },
          "last_name": {
            "type": "string",
            "description": "User's last name"
          },
          "username": {
            "type": "string",
            "description": "Telegram username"
          },
          "photo_url": {
            "type": "string",
            "description": "URL of the user's profile photo"
          },
          "auth_date": {
            "type": "integer",
            "description": "Authentication date (Unix time)"
          },
          "hash": {
            "type": "string",
            "description": "Authentication hash"
          }
        },
        "required": [
          "auth_date",
          "first_name",
          "hash",
          "id",
          "last_name",
          "username"
        ]
      },
      "SocialConnection": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "description": "Social provider name (discord, twitter, telegram)"
          },
          "provider_user_id": {
            "type": "string",
            "description": "User ID from the provider"
          },
          "provider_username": {
            "type": "string",
            "description": "Username from the provider"
          },
          "connected_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the connection was established"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the connection was last updated"
          }
        },
        "required": [
          "provider",
          "provider_user_id",
          "provider_username"
        ]
      },
      "ConnectionResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Success message"
          },
          "connection": {
            "description": "Connection details",
            "allOf": [
              {
                "$ref": "#/components/schemas/SocialConnection"
              }
            ]
          }
        },
        "required": [
          "message"
        ]
      },
      "ConnectionsList": {
        "type": "object",
        "properties": {
          "connections": {
            "type": "array",
            "description": "List of social connections",
            "items": {
              "$ref": "#/components/schemas/SocialConnection"
            }
          },
          "discord_connected": {
            "type": "boolean",
            "description": "Whether Discord is connected"
          },
          "twitter_connected": {
            "type": "boolean",
            "description": "Whether Twitter is connected"
          },
          "telegram_connected": {
            "type": "boolean",
            "description": "Whether Telegram is connected"
          }
        },
        "required": [
          "connections",
          "discord_connected",
          "telegram_connected",
          "twitter_connected"
        ]
      },
      "UserBasic1": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "Proposal": {
        "type": "object",
        "properties": {
          "proposal_id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "dao_id": {
            "type": "string"
          },
          "pod_id": {
            "type": "string",
            "nullable": true
          },
          "created_by": {
            "type": "string"
          },
          "created_by_username": {
            "type": "string"
          },
          "start_time": {
            "type": "string",
            "format": "date-time"
          },
          "end_time": {
            "type": "string",
            "format": "date-time"
          },
          "actions": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          },
          "for_votes_count": {
            "type": "integer",
            "readOnly": true
          },
          "against_votes_count": {
            "type": "integer",
            "readOnly": true
          },
          "for_voters": {
            "readOnly": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserBasic1"
            }
          },
          "against_voters": {
            "readOnly": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserBasic1"
            }
          },
          "is_active": {
            "readOnly": true
          },
          "has_passed": {
            "readOnly": true
          }
        },
        "required": [
          "created_by",
          "created_by_username",
          "dao_id",
          "description",
          "end_time",
          "name",
          "start_time"
        ]
      },
      "InputCreateProposal": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1
          },
          "description": {
            "type": "string",
            "minLength": 1
          },
          "dao_id": {
            "type": "string"
          },
          "pod_id": {
            "type": "string",
            "nullable": true
          },
          "start_time": {
            "type": "string",
            "format": "date-time"
          },
          "end_time": {
            "type": "string",
            "format": "date-time"
          },
          "actions": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          }
        },
        "required": [
          "dao_id",
          "description",
          "end_time",
          "name",
          "start_time"
        ]
      },
      "ProposalSchemaResponse": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string"
          },
          "proposal": {
            "$ref": "#/components/schemas/Proposal"
          }
        },
        "required": [
          "action",
          "proposal"
        ]
      },
      "ProposalUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1
          },
          "description": {
            "type": "string",
            "minLength": 1
          },
          "start_time": {
            "type": "string",
            "format": "date-time"
          },
          "end_time": {
            "type": "string",
            "format": "date-time"
          },
          "pod_id": {
            "type": "string",
            "nullable": true
          },
          "actions": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          }
        }
      },
      "ProposalVoteResponse": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string"
          },
          "vote_status": {
            "type": "string",
            "enum": [
              "none",
              "for",
              "against"
            ]
          },
          "proposal": {
            "$ref": "#/components/schemas/Proposal"
          },
          "for_votes_count": {
            "type": "integer"
          },
          "against_votes_count": {
            "type": "integer"
          }
        },
        "required": [
          "action",
          "against_votes_count",
          "for_votes_count",
          "proposal",
          "vote_status"
        ]
      },
      "ProposalVote": {
        "type": "object",
        "properties": {
          "vote": {
            "type": "string",
            "enum": [
              "for",
              "against"
            ]
          }
        },
        "required": [
          "vote"
        ]
      },
      "PodProposalListResponse": {
        "type": "object",
        "properties": {
          "pod_id": {
            "type": "string"
          },
          "proposals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Proposal"
            }
          },
          "total_count": {
            "type": "integer"
          }
        },
        "required": [
          "pod_id",
          "proposals",
          "total_count"
        ]
      }
    },
    "responses": {
      "DEFAULT_ERROR": {
        "description": "Default error response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "UNPROCESSABLE_ENTITY": {
        "description": "Unprocessable Entity",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    }
  }
}
