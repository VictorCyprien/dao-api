<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="1" skipped="0" tests="8" time="5.801" timestamp="2025-02-06T17:30:08.198122+01:00" hostname="Mac-mini-de-victor.local"><testcase classname="tests.api.auth.test_api_login" name="test_login_success" time="0.981" /><testcase classname="tests.api.auth.test_api_login" name="test_login_invalid_email" time="0.003" /><testcase classname="tests.api.auth.test_api_login" name="test_login_invalid_password" time="0.657" /><testcase classname="tests.api.auth.test_api_login" name="test_user_not_found" time="0.003" /><testcase classname="tests.api.auth.test_api_logout" name="test_logout_success" time="0.632"><failure message="redis.exceptions.ConnectionError: Error 61 connecting to localhost:6379. Connection refused.">self = &lt;redis.connection.Connection(host=localhost,port=6379,db=0)&gt;

    def connect(self):
        "Connects to the Redis server if not already connected"
        if self._sock:
            return
        try:
&gt;           sock = self.retry.call_with_retry(
                lambda: self._connect(), lambda error: self.disconnect(error)
            )

venv/lib/python3.9/site-packages/redis/connection.py:357: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.9/site-packages/redis/retry.py:62: in call_with_retry
    return do()
venv/lib/python3.9/site-packages/redis/connection.py:358: in &lt;lambda&gt;
    lambda: self._connect(), lambda error: self.disconnect(error)
venv/lib/python3.9/site-packages/redis/connection.py:730: in _connect
    raise err
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;redis.connection.Connection(host=localhost,port=6379,db=0)&gt;

    def _connect(self):
        "Create a TCP socket connection"
        # we want to mimic what socket.create_connection does to support
        # ipv4/ipv6, but we want to set options prior to calling
        # socket.connect()
        err = None
        for res in socket.getaddrinfo(
            self.host, self.port, self.socket_type, socket.SOCK_STREAM
        ):
            family, socktype, proto, canonname, socket_address = res
            sock = None
            try:
                sock = socket.socket(family, socktype, proto)
                # TCP_NODELAY
                sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)
    
                # TCP_KEEPALIVE
                if self.socket_keepalive:
                    sock.setsockopt(socket.SOL_SOCKET, socket.SO_KEEPALIVE, 1)
                    for k, v in self.socket_keepalive_options.items():
                        sock.setsockopt(socket.IPPROTO_TCP, k, v)
    
                # set the socket_connect_timeout before we connect
                sock.settimeout(self.socket_connect_timeout)
    
                # connect
&gt;               sock.connect(socket_address)
E               ConnectionRefusedError: [Errno 61] Connection refused

venv/lib/python3.9/site-packages/redis/connection.py:718: ConnectionRefusedError

During handling of the above exception, another exception occurred:

client = &lt;FlaskClient &lt;Flask 'api.app'&gt;&gt;, sayori = &lt;User: User object&gt;
sayori_logged_in = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6dHJ1ZSwiaWF0IjoxNzM4ODU5NDEwLCJqdGkiOiIxMjZjMDBlOS05ZGRmLTQxYTctOGEz...IxYzU5YTJlMi04MjViLTRiMjAtYTVhOC0zNGU4ZTA0ZTU4NmIiLCJleHAiOjE3Mzg4NjMwMTB9.a_lkXbTzKogd_1xPdy-3htBHnszJJYcQof8mF163QHg'

    def test_logout_success(client, sayori, sayori_logged_in):
        """Test successful logout"""
        headers = {"Authorization": f"Bearer {sayori_logged_in}"}
&gt;       response = client.post("/auth/logout", headers=headers)

tests/api/auth/test_api_logout.py:7: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.9/site-packages/werkzeug/test.py:1247: in post
    return self.open(*args, **kw)
venv/lib/python3.9/site-packages/flask/testing.py:238: in open
    response = super().open(
venv/lib/python3.9/site-packages/werkzeug/test.py:1196: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
venv/lib/python3.9/site-packages/werkzeug/test.py:1068: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
venv/lib/python3.9/site-packages/werkzeug/test.py:1344: in run_wsgi_app
    app_rv = app(environ, start_response)
venv/lib/python3.9/site-packages/flask/app.py:2552: in __call__
    return self.wsgi_app(environ, start_response)
venv/lib/python3.9/site-packages/flask/app.py:2532: in wsgi_app
    response = self.handle_exception(e)
venv/lib/python3.9/site-packages/flask/app.py:2529: in wsgi_app
    response = self.full_dispatch_request()
venv/lib/python3.9/site-packages/flask/app.py:1825: in full_dispatch_request
    rv = self.handle_user_exception(e)
venv/lib/python3.9/site-packages/flask/app.py:1823: in full_dispatch_request
    rv = self.dispatch_request()
venv/lib/python3.9/site-packages/flask/app.py:1799: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)
venv/lib/python3.9/site-packages/flask/views.py:107: in view
    return current_app.ensure_sync(self.dispatch_request)(**kwargs)
venv/lib/python3.9/site-packages/flask/views.py:188: in dispatch_request
    return current_app.ensure_sync(meth)(**kwargs)
venv/lib/python3.9/site-packages/flask_smorest/blueprint.py:297: in wrapper
    return func(*f_args, **f_kwargs)
venv/lib/python3.9/site-packages/flask_smorest/response.py:89: in wrapper
    func(*args, **kwargs)
venv/lib/python3.9/site-packages/flask_smorest/response.py:89: in wrapper
    func(*args, **kwargs)
venv/lib/python3.9/site-packages/flask_jwt_extended/view_decorators.py:167: in decorator
    verify_jwt_in_request(
venv/lib/python3.9/site-packages/flask_jwt_extended/view_decorators.py:94: in verify_jwt_in_request
    jwt_data, jwt_header, jwt_location = _decode_jwt_from_request(
venv/lib/python3.9/site-packages/flask_jwt_extended/view_decorators.py:368: in _decode_jwt_from_request
    verify_token_not_blocklisted(jwt_header, decoded_token)
venv/lib/python3.9/site-packages/flask_jwt_extended/internal_utils.py:58: in verify_token_not_blocklisted
    if jwt_manager._token_in_blocklist_callback(jwt_header, jwt_data):
api/app.py:86: in check_if_token_is_revoked
    token_in_redis = jwt_redis_blocklist.get(jti)
venv/lib/python3.9/site-packages/redis/commands/core.py:1822: in get
    return self.execute_command("GET", name, keys=[name])
venv/lib/python3.9/site-packages/redis/client.py:559: in execute_command
    return self._execute_command(*args, **options)
venv/lib/python3.9/site-packages/redis/client.py:565: in _execute_command
    conn = self.connection or pool.get_connection(command_name, **options)
venv/lib/python3.9/site-packages/redis/connection.py:1422: in get_connection
    connection.connect()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;redis.connection.Connection(host=localhost,port=6379,db=0)&gt;

    def connect(self):
        "Connects to the Redis server if not already connected"
        if self._sock:
            return
        try:
            sock = self.retry.call_with_retry(
                lambda: self._connect(), lambda error: self.disconnect(error)
            )
        except socket.timeout:
            raise TimeoutError("Timeout connecting to server")
        except OSError as e:
&gt;           raise ConnectionError(self._error_message(e))
E           redis.exceptions.ConnectionError: Error 61 connecting to localhost:6379. Connection refused.

venv/lib/python3.9/site-packages/redis/connection.py:363: ConnectionError</failure></testcase><testcase classname="tests.api.auth.test_api_logout" name="test_logout_no_token" time="0.006" /><testcase classname="tests.api.auth.test_api_logout" name="test_logout_invalid_token" time="0.011" /><testcase classname="tests.api.auth.test_api_logout" name="test_logout_expired_token" time="0.761" /><testcase time="0.692" /></testsuite></testsuites>